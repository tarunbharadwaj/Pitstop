var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSeasonRacesSchedule = exports.getCurrentSeasonRacesSchedule = exports.getConstructorStandings = exports.getCurrentConstructorStandings = exports.getDriverStandings = exports.getCurrentDriverStandings = exports.getConstructorInformation = exports.getDriverInformation = exports.getDrivers = exports.getCurrentDrivers = exports.getConstructors = exports.getCurrentConstructors = void 0;
const driver_1 = require("./parsers/driver");
const constructor_1 = require("./parsers/constructor");
const constructors_1 = require("./parsers/constructors");
const drivers_1 = require("./parsers/drivers");
const driverStandings_1 = require("./parsers/driverStandings");
const constructorStandings_1 = require("./parsers/constructorStandings");
const racesSchedule_1 = require("./parsers/racesSchedule");
const standingList_1 = require("./parsers/standingList");
const request_1 = require("./utils/request");
const getCurrentConstructors = () => __awaiter(this, void 0, void 0, function* () {
    return getConstructors(new Date().getFullYear());
});
exports.getCurrentConstructors = getCurrentConstructors;
const getConstructors = (year) => __awaiter(this, void 0, void 0, function* () {
    return (0, request_1.makeRequest)(`/${year}/constructors`, constructors_1.default.getInstance());
});
exports.getConstructors = getConstructors;
const getCurrentDrivers = () => __awaiter(this, void 0, void 0, function* () {
    return getDrivers(new Date().getFullYear());
});
exports.getCurrentDrivers = getCurrentDrivers;
const getDrivers = (year) => __awaiter(this, void 0, void 0, function* () {
    return (0, request_1.makeRequest)(`/${year}/drivers`, drivers_1.default.getInstance());
});
exports.getDrivers = getDrivers;
const getDriverInformation = (id) => __awaiter(this, void 0, void 0, function* () {
    return (0, request_1.makeRequest)(`/drivers/${id}`, driver_1.default.getInstance());
});
exports.getDriverInformation = getDriverInformation;
const getConstructorInformation = (id) => __awaiter(this, void 0, void 0, function* () {
    return (0, request_1.makeRequest)(`/constructors/${id}`, constructor_1.default.getInstance());
});
exports.getConstructorInformation = getConstructorInformation;
const getCurrentDriverStandings = () => __awaiter(this, void 0, void 0, function* () {
    return (0, request_1.makeRequest)('/current/driverStandings', standingList_1.default.getInstance(), driverStandings_1.default.getInstance());
});
exports.getCurrentDriverStandings = getCurrentDriverStandings;
const getDriverStandings = (year, round) => __awaiter(this, void 0, void 0, function* () {
    let url = `/${year}/driverStandings`;
    if (round && isFinite(round) && round > 0) {
        url = `/${year}/${round}/driverStandings`;
    }
    return (0, request_1.makeRequest)(url, standingList_1.default.getInstance(), driverStandings_1.default.getInstance());
});
exports.getDriverStandings = getDriverStandings;
const getCurrentConstructorStandings = () => __awaiter(this, void 0, void 0, function* () {
    return (0, request_1.makeRequest)('/current/constructorStandings', standingList_1.default.getInstance(), constructorStandings_1.default.getInstance());
});
exports.getCurrentConstructorStandings = getCurrentConstructorStandings;
const getConstructorStandings = (year, round) => __awaiter(this, void 0, void 0, function* () {
    let url = `/${year}/constructorStandings`;
    if (round && isFinite(round) && round > 0) {
        url = `/${year}/${round}/constructorStandings`;
    }
    return (0, request_1.makeRequest)(url, standingList_1.default.getInstance(), constructorStandings_1.default.getInstance());
});
exports.getConstructorStandings = getConstructorStandings;
const getCurrentSeasonRacesSchedule = () => __awaiter(this, void 0, void 0, function* () {
    return (0, request_1.makeRequest)('/current', racesSchedule_1.default.getInstance());
});
exports.getCurrentSeasonRacesSchedule = getCurrentSeasonRacesSchedule;
const getSeasonRacesSchedule = (year) => __awaiter(this, void 0, void 0, function* () {
    return (0, request_1.makeRequest)(`/${year}`, racesSchedule_1.default.getInstance());
});
exports.getSeasonRacesSchedule = getSeasonRacesSchedule;
