"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDriverStandings = void 0;
const axios_1 = __importDefault(require("axios"));
const cheerio_1 = __importDefault(require("cheerio"));
const endpoints_1 = require("../endpoints/endpoints");
const getDriverStandings = (year = new Date().getFullYear()) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        let driverStandings = [];
        const response = yield (0, axios_1.default)(`${endpoints_1.dynamicLinks.rootLink}/${year}/${endpoints_1.dynamicLinks.driverStandings}`);
        const $ = cheerio_1.default.load(response.data);
        $("tr").each(function () {
            const position = parseInt($(this).find(" td:nth-child(2) ").text());
            const firstName = $(this).find(" a.dark.bold.ArchiveLink > span:nth-child(1)").text();
            const lastName = $(this).find(" a.dark.bold.ArchiveLink > span:nth-child(2)").text();
            const driver = firstName.concat(" ", lastName);
            const nationality = $(this).find(" td.dark.semi-bold.uppercase").text();
            const team = $(this).find("td:nth-child(5) > a.grey.semi-bold.uppercase.ArchiveLink").text();
            const points = parseInt($(this).find(" td:nth-child(6) ").text());
            if (!Number.isNaN(position) && !Number.isNaN(points) && driver.length !== 0 && nationality.length !== 0 && team.length !== 0) {
                const driverStanding = {
                    position,
                    driver,
                    nationality,
                    team,
                    points,
                };
                driverStandings.push(driverStanding);
            }
        });
        if (driverStandings.length === 0) {
            throw new Error(" No data found");
        }
        return driverStandings;
    }
    catch (error) {
        throw new Error(error);
    }
});
exports.getDriverStandings = getDriverStandings;
//# sourceMappingURL=driver-standings.js.map