"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRaceResults = void 0;
const axios_1 = __importDefault(require("axios"));
const cheerio_1 = __importDefault(require("cheerio"));
const endpoints_1 = require("../endpoints/endpoints");
const getRaceResults = (year = new Date().getFullYear()) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        let raceResults = [];
        const response = yield (0, axios_1.default)(`${endpoints_1.dynamicLinks.rootLink}/${year}/${endpoints_1.dynamicLinks.results}`);
        const $ = cheerio_1.default.load(response.data);
        $("tr").each(function () {
            const grandPrix = $(this).find("td:nth-child(2) > a:nth-child(1)").text().trim();
            const raceDate = $(this).find("td:nth-child(3)").text().trim();
            const winner = $(this).find("td:nth-child(4) > span:nth-child(2)").text().trim();
            const car = $(this).find("td:nth-child(5)").text().trim();
            const laps = parseInt($(this).find("td:nth-child(6)").text().trim());
            const time = $(this).find("td:nth-child(7)").text().trim();
            if ((grandPrix.length !== 0 && raceDate.length !== 0 && winner.length !== 0, car.length !== 0, !Number.isNaN(laps), time.length !== 0)) {
                const raceResult = {
                    grandPrix,
                    date: new Date(raceDate),
                    winner,
                    car,
                    laps,
                    time,
                };
                raceResults.push(raceResult);
            }
        });
        if (raceResults.length === 0) {
            throw new Error(" No data found");
        }
        return raceResults;
    }
    catch (error) {
        throw new Error(error);
    }
});
exports.getRaceResults = getRaceResults;
//# sourceMappingURL=race-results.js.map