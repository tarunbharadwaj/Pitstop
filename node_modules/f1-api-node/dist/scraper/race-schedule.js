"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRaceSchedule = void 0;
const axios_1 = __importDefault(require("axios"));
const cheerio_1 = __importDefault(require("cheerio"));
const endpoints_1 = require("../endpoints/endpoints");
const getRaceSchedule = (year = new Date().getFullYear()) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        let raceSchedule = [];
        const response = yield (0, axios_1.default)(`${endpoints_1.dynamicLinks.raceSchedule}/${year}.html`);
        const $ = cheerio_1.default.load(response.data);
        $("fieldset").each(function () {
            const round = $(this).find("legend:nth-child(1)").text().trim();
            const dateDays = $(this)
                .find("div:nth-child(2) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > p:nth-child(1)")
                .text()
                .trim();
            const dateMonth = $(this)
                .find("div:nth-child(2) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > span:nth-child(2)")
                .text();
            const raceCountry = $(this)
                .find("div:nth-child(2) > div:nth-child(1) > div:nth-child(1) > div:nth-child(2) > div:nth-child(1) > div:nth-child(1)")
                .text()
                .trim();
            const eventTitle = $(this)
                .find("div:nth-child(2) > div:nth-child(1) > div:nth-child(1) > div:nth-child(2) > div:nth-child(1) > div:nth-child(2)")
                .text()
                .trim();
            const trackMap = $(this)
                .find("div:nth-child(2) > div:nth-child(1) > div:nth-child(1) > div:nth-child(2) > div:nth-child(2) > picture:nth-child(1) > img:nth-child(2)")
                .attr("data-src");
            if (round !== undefined && raceCountry !== undefined && eventTitle !== undefined && trackMap !== undefined) {
                const singleSchedule = {
                    round,
                    date: dateDays.concat("", dateMonth),
                    raceCountry,
                    eventTitle,
                    trackMap,
                };
                raceSchedule.push(singleSchedule);
            }
        });
        if (raceSchedule.length === 0) {
            throw new Error(" No data found");
        }
        return raceSchedule;
    }
    catch (error) {
        throw new Error(error);
    }
});
exports.getRaceSchedule = getRaceSchedule;
//# sourceMappingURL=race-schedule.js.map