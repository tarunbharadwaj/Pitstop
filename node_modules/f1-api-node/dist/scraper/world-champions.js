"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWorldChampions = void 0;
const axios_1 = __importDefault(require("axios"));
const cheerio_1 = __importDefault(require("cheerio"));
const endpoints_1 = require("../endpoints/endpoints");
const getWorldChampions = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        let worldChampions = [];
        const response = yield (0, axios_1.default)(endpoints_1.staticLinks.hallOfFame);
        const $ = cheerio_1.default.load(response.data);
        $("article").each(function () {
            const years = [];
            const name = $(this).find("section > h4").text().trim().split("-")[0];
            $(this)
                .find("section > h4")
                .text()
                .trim()
                .split("-")[1]
                .split(",")
                .forEach((x) => {
                if (x) {
                    const year = parseInt(x);
                    years.push(year);
                }
            });
            if (name.length !== 0 && years.length !== 0) {
                const worldChampion = {
                    name,
                    years,
                };
                worldChampions.push(worldChampion);
            }
        });
        if (worldChampions.length === 0) {
            throw new Error(" No data found");
        }
        return worldChampions;
    }
    catch (error) {
        throw new Error(error);
    }
});
exports.getWorldChampions = getWorldChampions;
//# sourceMappingURL=world-champions.js.map