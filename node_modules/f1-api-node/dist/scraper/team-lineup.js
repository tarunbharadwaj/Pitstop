"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTeamLineup = void 0;
const axios_1 = __importDefault(require("axios"));
const cheerio_1 = __importDefault(require("cheerio"));
const endpoints_1 = require("../endpoints/endpoints");
const getTeamLineup = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        let teams = [];
        const response = yield (0, axios_1.default)(endpoints_1.staticLinks.teams);
        const $ = cheerio_1.default.load(response.data);
        $("a.outline").each(function () {
            const name = $(this).find("div> div > h4:nth-child(1) > span:nth-child(1)").text();
            const driver1_0 = $(this).find("div:nth-child(5) > div:nth-child(1) > div:nth-child(1) > div > p:nth-child(1)").text();
            const driver1_1 = $(this).find("div:nth-child(5) > div:nth-child(1) > div:nth-child(1) > div > p:nth-child(2)").text();
            const driver2_0 = $(this).find("div:nth-child(5) > div:nth-child(2) > div:nth-child(1) > div > p:nth-child(1)").text();
            const driver2_1 = $(this).find("div:nth-child(5) > div:nth-child(2) > div:nth-child(1) > div > p:nth-child(2)").text();
            const driver1 = driver1_0.concat(" ", driver1_1);
            const driver2 = driver2_0.concat(" ", driver2_1);
            const drivers = [driver1, driver2];
            const carLogo = $(this).find("div:nth-child(1) > div:nth-child(3) > img").attr("src");
            const carImage = $(this).find("div:nth-child(1) > div:nth-child(6) > img").attr("src");
            if (name.length !== 0) {
                const team = {
                    name,
                    drivers,
                    carLogo,
                    carImage,
                };
                teams.push(team);
            }
        });
        if (teams.length === 0) {
            throw new Error(" No data found");
        }
        return teams;
    }
    catch (error) {
        throw new Error(error);
    }
});
exports.getTeamLineup = getTeamLineup;
//# sourceMappingURL=team-lineup.js.map