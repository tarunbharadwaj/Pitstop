"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDriverLineup = void 0;
const axios_1 = __importDefault(require("axios"));
const cheerio_1 = __importDefault(require("cheerio"));
const endpoints_1 = require("../endpoints/endpoints");
const getDriverLineup = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        let drivers = [];
        const response = yield (0, axios_1.default)(endpoints_1.staticLinks.drivers);
        const $ = cheerio_1.default.load(response.data);
        $("a.outline").each(function () {
            const firstName = $(this).find("div:nth-child(1) > div:nth-child(1) > div:nth-child(3) > h4:nth-child(1) > div:nth-child(1) > p:nth-child(1)").text().trim();
            const secondName = $(this).find("div:nth-child(1) > div:nth-child(1) > div:nth-child(3) > h4:nth-child(1) > div:nth-child(1) > p:nth-child(2)").text().trim();
            const team = $(this).find("div:nth-child(1) > div:nth-child(1) > p:nth-child(5)").text();
            const rank = $(this).find("div:nth-child(1) > div:nth-child(1) > div:nth-child(1) > p:nth-child(1)").text().trim();
            const nationalityImage = $(this).find("div:nth-child(1) > div:nth-child(1) > div:nth-child(3) > img:nth-child(2)").attr("src");
            const driverImage = $(this).find("div:nth-child(1) > div:nth-child(1) > div:nth-child(6) > img:nth-child(2)").attr("src");
            if (firstName.length !== 0 && secondName.length !== 0 && team.length !== 0) {
                const driver = {
                    name: firstName.concat(" ", secondName),
                    team,
                    rank,
                    nationalityImage,
                    driverImage,
                };
                drivers.push(driver);
            }
        });
        if (drivers.length === 0) {
            throw new Error("No data found");
        }
        return drivers;
    }
    catch (error) {
        throw new Error(error);
    }
});
exports.getDriverLineup = getDriverLineup;
//# sourceMappingURL=driver-lineup.js.map