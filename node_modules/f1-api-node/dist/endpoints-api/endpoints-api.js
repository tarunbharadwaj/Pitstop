"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fastestLaps = exports.raceSchedule = exports.raceResults = exports.worldChampions = exports.constructorStandings = exports.driverStandings = exports.teamLineUp = exports.driverLineUp = void 0;
const driver_lineup_1 = require("../scraper/driver-lineup");
const team_lineup_1 = require("../scraper/team-lineup");
const driver_standings_1 = require("../scraper/driver-standings");
const constructors_standings_1 = require("../scraper/constructors-standings");
const world_champions_1 = require("../scraper/world-champions");
const race_results_1 = require("../scraper/race-results");
const race_schedule_1 = require("../scraper/race-schedule");
const fastest_laps_1 = require("../scraper/fastest-laps");
const driverLineUp = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const data = yield (0, driver_lineup_1.getDriverLineup)();
        res.json(data);
    }
    catch (err) {
        res.status(500).json({ error: err.message.toString() });
    }
});
exports.driverLineUp = driverLineUp;
const teamLineUp = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const data = yield (0, team_lineup_1.getTeamLineup)();
        res.json(data);
    }
    catch (err) {
        res.status(500).json({ error: err.message.toString() });
    }
});
exports.teamLineUp = teamLineUp;
const driverStandings = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { year } = req.params;
        const data = yield (0, driver_standings_1.getDriverStandings)(parseInt(year));
        res.json(data);
    }
    catch (err) {
        res.status(500).json({ error: err.message.toString() });
    }
});
exports.driverStandings = driverStandings;
const constructorStandings = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { year } = req.params;
        const data = yield (0, constructors_standings_1.getConstructorStandings)(parseInt(year));
        res.json(data);
    }
    catch (err) {
        res.status(500).json({ error: err.message.toString() });
    }
});
exports.constructorStandings = constructorStandings;
const worldChampions = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const data = yield (0, world_champions_1.getWorldChampions)();
        res.json(data);
    }
    catch (err) {
        res.status(500).json({ error: err.message.toString() });
    }
});
exports.worldChampions = worldChampions;
const raceResults = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { year } = req.params;
        const data = yield (0, race_results_1.getRaceResults)(parseInt(year));
        res.json(data);
    }
    catch (err) {
        res.status(500).json({ error: err.message.toString() });
    }
});
exports.raceResults = raceResults;
const raceSchedule = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { year } = req.params;
        const data = yield (0, race_schedule_1.getRaceSchedule)(parseInt(year));
        res.json(data);
    }
    catch (err) {
        res.status(500).json({ error: err.message.toString() });
    }
});
exports.raceSchedule = raceSchedule;
const fastestLaps = (req, res) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const { year } = req.params;
        const data = yield (0, fastest_laps_1.getFastestLaps)(parseInt(year));
        res.json(data);
    }
    catch (err) {
        res.status(500).json({ error: err.message.toString() });
    }
});
exports.fastestLaps = fastestLaps;
//# sourceMappingURL=endpoints-api.js.map